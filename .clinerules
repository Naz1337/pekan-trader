# Project Configuration

## Tech Stack

- AlpineJS for front-end interactivity and reactivity
- Tailwind CSS for styling
- Daisy UI components for its benefits
- Laravel for backend
- GitHub for version control

## Something about how to handle files from user

In Laravel, uploaded files are stored on the server’s disk—either in a **public** or **private** folder, not in the database. If you want to reference a file in the database, you only store its **relative path**, not the full path. This way, `Storage::url()` can generate the correct access URL when needed.

## Something to think about when making form

When making a form, please consider using the blade components in the form folder

## Database Conventions

- **Foreign Keys:** Adhere to Laravel's convention for foreign key columns: `singular_table_name_id`. For example, for a `ProductAttribute` belonging to a `ProductAttributeKey`, the foreign key in the `product_attributes` table should ideally be `product_attribute_key_id`. If deviating from this, ensure explicit definition in model relationships.
- **Primary Keys:** Use `id` (auto-incrementing integer).
- **Table Names:** Use plural snake_case (e.g., `product_attributes`).
- **Model Names:** Use Singular PascalCase (e.g., `ProductAttribute`).

## Icon Component Usage

- **Usage:** To embed an icon, use the Blade component syntax: `<x-icon.[icon-name] />`. You can apply CSS classes for styling, for example: `<x-icon.cart class="w-6 h-6" />`.
- **Requesting New Icons:** If an icon is not available in the `resources/views/components/icon/` directory, please request the specific icon (e.g., "paper-plane" from Font Awesome). The icon will then be manually added to the `resources/views/components/icon/` directory (e.g., `paper-plane.blade.php`).

### Alpine.js Initialization Requirement
- Any page using Alpine.js components MUST include an `x-data` attribute on a parent element
- Without this, Alpine.js functionality (click handlers, state management) will not work
- Example: `<div x-data>...</div>` or `<div x-data="{}">...</div>`

### Manual Command Execution
- Database Migrations: Run `php artisan migrate` manually after schema changes
- Development Server: Start with `php artisan serve` for backend
- Frontend Assets: Build with `npm run build` for production or `npm run dev` for development
- Always run these commands after making changes that affect:
  - Database schema (migrations)
  - JavaScript/CSS assets
  - Configuration files
